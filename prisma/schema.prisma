generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  name                   String
  email                  String                 @unique
  emailVerified          DateTime?
  image                  String?                @default("/globe.svg")
  password               String
  role                   UserRole               @default(CLIENT)
  isTwoFactorEnabled     Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  apellido               String?
  ciudadDeResidencia     String?
  onboardingStatus       OnboardingStatus       @default(PENDIENTE)
  telefono               String?                @unique
  expediente             String?
  materiasActuales       String?                @db.LongText
  semestreActual         String?
  universidadId          String?
  carreraId              String?
  accounts               Account[]
  blogPosts              BlogPost[]
  StripeCustomer         StripeCustomer?
  twoFactorConfirmation  TwoFactorConfirmation?
  universidad            Universidad?           @relation(fields: [universidadId], references: [id])
  carrera                Carrera?               @relation(fields: [carreraId], references: [id])
  UserSubscription       UserSubscription[]
  notifications          Notification[]
  materiasEstudiante     MateriaEstudiante[]
  recursos                Recurso[]
  calificaciones         CalificacionRecurso[]
  comentarios            ComentarioRecurso[]
  vistas                  VistaRecurso[]
  descargas              DescargaRecurso[]
  metas                  MetaAcademica[]

  @@index([role])
  @@index([universidadId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id        String   @id @default(uuid())
  userId    String
  stripeCustomerId String?
  stripeSubscriptionId String?
  stripePriceId String?
  stripeCurrentPeriodEnd DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}



model Universidad {
  id        String    @id @default(uuid())
  nombre    String    @unique
  siglas    String    @unique
  direccion String
  telefono  String
  email     String
  website   String?
  estado    String
  ciudad    String
  tipo      String    @default("PÚBLICA")
  ranking   Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String?
  isActive  Boolean   @default(true)
  carreras  Carrera[]
  users     User[]
}

model Carrera {
  id            String      @id @default(uuid())
  nombre        String
  codigo        String      @unique
  descripcion   String?     @db.Text
  duracion      Int
  creditos      Int
  universidadId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)
  universidad   Universidad @relation(fields: [universidadId], references: [id], onDelete: Cascade)
  materias      Materia[]
  usuarios      User[]

  @@index([universidadId])
}

model Materia {
  id                String                 @id @default(uuid())
  nombre            String
  codigo            String                 @unique
  descripcion       String?                @db.Text
  creditos          Int
  semestre          Semestre
  horasTeoria       Int
  horasPractica     Int
  carreraId         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  isActive          Boolean                @default(true)
  carrera           Carrera                @relation(fields: [carreraId], references: [id], onDelete: Cascade)
  prerrequisitos    MateriaPrerrequisito[] @relation("MateriaPrerrequisito")
  esPrerrequisitoDe MateriaPrerrequisito[] @relation("MateriaQueRequiere")
  materiasEstudiante MateriaEstudiante[]
  recursos           Recurso[]

  @@index([carreraId])
}

model MateriaPrerrequisito {
  id                String            @id @default(uuid())
  materiaId         String
  prerrequisitoId   String
  tipoPrerrequisito TipoPrerrequisito @default(OBLIGATORIO)
  createdAt         DateTime          @default(now())
  materia           Materia           @relation("MateriaPrerrequisito", fields: [materiaId], references: [id], onDelete: Cascade)
  prerrequisito     Materia           @relation("MateriaQueRequiere", fields: [prerrequisitoId], references: [id], onDelete: Cascade)

  @@unique([materiaId, prerrequisitoId])
  @@index([materiaId])
  @@index([prerrequisitoId])
}

model MateriaEstudiante {
  id                String              @id @default(uuid())
  userId            String
  materiaId         String
  estado            EstadoMateria       @default(NO_CURSADA)
  nota              Float?
  semestreCursado   String?
  fechaInicio       DateTime?
  fechaFin          DateTime?
  observaciones     String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  materia           Materia             @relation(fields: [materiaId], references: [id], onDelete: Cascade)

  @@unique([userId, materiaId])
  @@index([userId])
  @@index([materiaId])
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String?       @unique
  content     String?       @db.Text
  imageUrl    String?
  isPublished Boolean       @default(false)
  authorId    String
  categoryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  titleMeta   String?
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory? @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "BlogPost_authorId_fkey")
  @@index([categoryId], map: "BlogPost_categoryId_fkey")
}

model BlogCategory {
  id    String @id @default(cuid())
  name  String @unique
  posts BlogPost[]
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Recurso {
  id          String   @id @default(cuid())
  titulo      String
  descripcion String
  tipo        TipoRecurso
  contenido   String   // Contenido del recurso (texto, enlaces, etc.)
  archivoUrl  String?  // URL del archivo si se sube uno
  materiaId   String
  materia     Materia  @relation(fields: [materiaId], references: [id], onDelete: Cascade)
  autorId     String
  autor       User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  calificacion Float   @default(0) // Promedio de calificaciones
  numCalificaciones Int @default(0) // Número de calificaciones
  numVistas   Int      @default(0) // Número de veces visto
  numDescargas Int     @default(0) // Número de descargas
  esPublico   Boolean  @default(true)
  tags        String   // Tags para categorización (separados por comas)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  calificaciones CalificacionRecurso[]
  comentarios    ComentarioRecurso[]
  vistas         VistaRecurso[]
  descargas      DescargaRecurso[]

  @@index([materiaId])
  @@index([autorId])
  @@index([tipo])
  @@index([esPublico])
}

model CalificacionRecurso {
  id          String   @id @default(cuid())
  recursoId   String
  recurso     Recurso  @relation(fields: [recursoId], references: [id], onDelete: Cascade)
  usuarioId   String
  usuario     User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  calificacion Int     // 1-5 estrellas
  comentario  String?  // Comentario opcional
  createdAt   DateTime @default(now())

  @@unique([recursoId, usuarioId]) // Un usuario solo puede calificar una vez
  @@index([recursoId])
  @@index([usuarioId])
}

model ComentarioRecurso {
  id          String   @id @default(cuid())
  recursoId   String
  recurso     Recurso  @relation(fields: [recursoId], references: [id], onDelete: Cascade)
  autorId     String
  autor       User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  contenido   String
  esRespuesta Boolean  @default(false) // Si es respuesta a otro comentario
  comentarioPadreId String? // ID del comentario padre si es respuesta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([recursoId])
  @@index([autorId])
}

model VistaRecurso {
  id          String   @id @default(cuid())
  recursoId   String
  recurso     Recurso  @relation(fields: [recursoId], references: [id], onDelete: Cascade)
  usuarioId   String?
  usuario     User?    @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  ipAddress   String?  // Para tracking de vistas anónimas
  userAgent   String?  // Información del navegador
  createdAt   DateTime @default(now())

  @@index([recursoId])
  @@index([usuarioId])
}

model DescargaRecurso {
  id          String   @id @default(cuid())
  recursoId   String
  recurso     Recurso  @relation(fields: [recursoId], references: [id], onDelete: Cascade)
  usuarioId   String
  usuario     User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([recursoId])
  @@index([usuarioId])
}

model MetaAcademica {
  id          String   @id @default(cuid())
  usuarioId   String
  usuario     User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  titulo      String
  descripcion String?
  tipo        TipoMeta
  valorObjetivo Float  // Valor objetivo (promedio, materias, etc.)
  valorActual  Float   @default(0)
  fechaLimite DateTime?
  completada  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([usuarioId])
  @@index([tipo])
  @@index([completada])
}



enum UserRole {
  CLIENT
  ADMIN
  ABOGADO
}

enum Estado {
  PENDIENTE
  APROBADA
  EN_PROGRESO
  FINALIZADA
  RECHAZADA
}

enum OnboardingStatus {
  PENDIENTE
  FINALIZADO
  CANCELADO
}



enum TipoPrerrequisito {
  OBLIGATORIO
  RECOMENDADO
  CO_REQUISITO
}

enum Semestre {
  S1
  S2
  S3
  S4
  S5
  S6
  S7
  S8
  S9
  S10
}

enum EstadoMateria {
  NO_CURSADA
  EN_CURSO
  APROBADA
  APLAZADA
  RETIRADA
}

enum TipoRecurso {
  ANOTACION
  RESUMEN
  GUIA_ESTUDIO
  EJERCICIOS
  PRESENTACION
  VIDEO
  AUDIO
  DOCUMENTO
  ENLACE
  TIP
}

enum TipoMeta {
  PROMEDIO_GENERAL
  MATERIAS_APROBADAS
  CREDITOS_COMPLETADOS
  SEMESTRE_ESPECIFICO
  MATERIA_ESPECIFICA
  HORAS_ESTUDIO
}
