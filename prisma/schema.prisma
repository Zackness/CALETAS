// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  email                 String                 @unique
  cedula                String                 @unique
  telefono              String?                @unique
  codigoEmpresa         String?
  emailVerified         DateTime?
  image                 String?                @default("/mascot.svg")
  password              String
  empresa               String
  role                  UserRole               @default(CLIENT)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  StripeCustomer        StripeCustomer?
  twoFactorConfirmation TwoFactorConfirmation?
  UserSubscription      UserSubscription[]
  familiares            Familiar[]
  solicitudes           Solicitud[]
  empresas              Empresa                @relation(fields: [empresa], references: [id])
  blogPosts             BlogPost[]
  @@index([empresa])
  @@index([role])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                     String               @id @default(cuid())
  userId                 String
  stripeCustomerId       String               @unique
  stripeSubscriptionId   String               @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  subscriptionTypeId     String
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionTypeId])
}

//Familiar que registra el usuario en cuestion
model Familiar {
  id          String   @id @default(uuid())
  nombre      String
  cedula      String   @unique
  telefono    String?                @unique
  parentesco  Parentesco
  usuarioId   String
  usuario     User  @relation(fields: [usuarioId], references: [id])
  solicitudes Solicitud[]
}

//Referencia principalmente para orden y para el ADMIN
model Servicio {
  id          String      @id @default(uuid())
  nombre      String
  descripcion String?
  documentos  Documento[]
}

//Referencia a los 12 documentos o tipo de solicitud que se pueden hacer
model Documento {
  id          String    @id @default(uuid())
  nombre      String
  servicioId  String
  servicio    Servicio @relation(fields: [servicioId], references: [id])
  solicitud Solicitud []
}

//Referencia a los documentos que se pueden solicitar
model Solicitud {
  id            Int     @id @default(autoincrement())
  documentoId   String
  usuarioId     String
  createdAt     DateTime  @default(now())
  estado        Estado    @default(PENDIENTE)
  updatedAt     DateTime  @updatedAt
  familiarId    String?
  detalle       Detalle?  // Relación 1:1 (sin fields/references aquí)
  familiar      Familiar? @relation(fields: [familiarId], references: [id])
  usuario       User      @relation(fields: [usuarioId], references: [id])
  documento     Documento @relation(fields: [documentoId], references: [id])
}

model Detalle {
  id          String @id @default(uuid())
  solicitudId Int    @unique // Campo único (pero no clave primaria)
  Testigo1        String?
  Testigo2        String?
  Testigo3        String?
  Testigo4        String? // Para la cédula del esposo/a en caso de no existir en la DB
  generic_text     String? // Para el tipo de poder especial
  bienes_generico1 String?
  bienes_generico2 String?
  bienes_generico3 String?
  bienes_generico4 String?
  bienes_generico5 String?
  Acta_de_nacimiento String?
  Acta_de_matrimonio String?
  Acta_de_defuncion String?
  Acta_de_divorcio  String?
  solicitud   Solicitud @relation(fields: [solicitudId], references: [id])
}

//Empresa por la que contrato el servicio el usuario
model Empresa {
  id          String    @id @default(uuid())
  userId      String
  nombre      String    @unique
  direccion   String
  telefono    String
  createdAt   DateTime  @default(now())
  RIF         String    @unique
  persona_de_contacto String
  email       String
  tipo        TipoEmpresa
  user        User[]
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String?       @unique
  content     String?       @db.Text
  imageUrl    String?
  isPublished Boolean       @default(false)
  authorId    String
  categoryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  titleMeta   String?
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory? @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "BlogPost_authorId_fkey")
  @@index([categoryId], map: "BlogPost_categoryId_fkey")
}

model BlogCategory {
  id    String     @id @default(cuid())
  name  String     @unique
  posts BlogPost[]
}

//Tipo de empresa con la que contrato el usuario, solo para nuesto control
enum TipoEmpresa {
  SEGURO
  TELECOMUNICACIONES
  BANCO
  INDUSTRIAL
  NINGUNO
}

//Tipos de usuario
enum UserRole {
  CLIENT
  ADMIN
}

//Estado de la solicitud que hace el usuario
enum Estado {
  PENDIENTE
  APROBADA
  EN_PROGRESO
  FINALIZADA
  RECHAZADA
}

//Parentesco de la tabla familiares
enum Parentesco {
  PADRE
  MADRE
  HIJO
  HIJA
  ESPOSO
  ESPOSA
}