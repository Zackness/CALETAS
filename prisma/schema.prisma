generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  name                   String                 @unique
  name2                  String?
  apellido               String?
  apellido2              String?
  email                  String                 @unique
  cedula                 String?                 @unique
  telefono               String?                @unique
  codigoEmpresa          String?
  emailVerified          DateTime?
  image                  String?                @default("/mascot.svg")
  password               String
  empresa                String?
  role                   UserRole               @default(CLIENT)
  isTwoFactorEnabled     Boolean                @default(false)
  onboardingStatus       OnboardingStatus       @default(PENDIENTE)
  EstadoDeResidencia     EstadoDeResidencia?
  ciudadDeResidencia     String?
  fechaNacimiento        DateTime?
  estadoCivil            EstadoCivil            @default(SOLTERO)
  isCiVerified           Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  accounts               Account[]
  blogPosts              BlogPost[]
  documentosHabilitados  DocumentoEditable[]
  familiares             Familiar[]
  notificaciones         Notificacion[]
  solicitudes            Solicitud[]
  solicitudesAsignadas   SolicitudAbogado[]
  asignacionesRealizadas SolicitudAbogado[]     @relation("Asignador")
  StripeCustomer         StripeCustomer?
  twoFactorConfirmation  TwoFactorConfirmation?
  empresas               Empresa[]              @relation("UserEmpresa")
  UserSubscription       UserSubscription[]

  @@index([empresa])
  @@index([role])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                     String   @id @default(cuid())
  userId                 String
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  subscriptionTypeId     String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionTypeId])
}

model Familiar {
  id              String      @id @default(uuid())
  nombre          String
  nombre2         String?
  apellido        String?
  apellido2       String?
  cedula          String      @unique
  telefono        String?     @unique
  parentesco      Parentesco
  fechaNacimiento DateTime?
  usuarioId       String
  usuario         User        @relation(fields: [usuarioId], references: [id])
  solicitudes     Solicitud[]

  @@index([usuarioId], map: "Familiar_usuarioId_fkey")
}

model Servicio {
  id          String      @id @default(uuid())
  nombre      String
  descripcion String?
  documentos  Documento[]
}

model Documento {
  id         String      @id @default(uuid())
  nombre     String
  servicioId String
  servicio   Servicio    @relation(fields: [servicioId], references: [id])
  solicitud  Solicitud[]

  @@index([servicioId], map: "Documento_servicioId_fkey")
}

model Solicitud {
  id                  Int                 @id @default(autoincrement())
  documentoId         String
  usuarioId           String
  createdAt           DateTime            @default(now())
  estado              Estado              @default(PENDIENTE)
  updatedAt           DateTime            @updatedAt
  familiarId          String?
  notaId              String?
  detalle             Detalle?
  documentosEditables DocumentoEditable[]
  notificaciones      Notificacion[]
  documento           Documento           @relation(fields: [documentoId], references: [id])
  familiar            Familiar?           @relation(fields: [familiarId], references: [id])
  nota                Nota?               @relation(fields: [notaId], references: [id])
  usuario             User                @relation(fields: [usuarioId], references: [id])
  abogadosAsignados   SolicitudAbogado[]

  @@index([documentoId], map: "Solicitud_documentoId_fkey")
  @@index([familiarId], map: "Solicitud_familiarId_fkey")
  @@index([notaId], map: "Solicitud_notaId_fkey")
  @@index([usuarioId], map: "Solicitud_usuarioId_fkey")
}

model SolicitudAbogado {
  id          String    @id @default(uuid())
  solicitudId Int
  abogadoId   String
  asignadoPor String
  asignadoEn  DateTime  @default(now())
  abogado     User      @relation(fields: [abogadoId], references: [id], onDelete: Cascade)
  asignador   User      @relation("Asignador", fields: [asignadoPor], references: [id], onDelete: Cascade)
  solicitud   Solicitud @relation(fields: [solicitudId], references: [id], onDelete: Cascade)

  @@unique([solicitudId, abogadoId])
  @@index([solicitudId])
  @@index([abogadoId])
  @@index([asignadoPor])
}

model DocumentoEditable {
  id              String    @id @default(uuid())
  solicitudId     Int
  nombreDocumento String
  editable        Boolean   @default(false)
  habilitadoPor   String
  habilitadoEn    DateTime  @default(now())
  habilitador     User      @relation(fields: [habilitadoPor], references: [id], onDelete: Cascade)
  solicitud       Solicitud @relation(fields: [solicitudId], references: [id], onDelete: Cascade)

  @@unique([solicitudId, nombreDocumento])
  @@index([solicitudId])
  @@index([habilitadoPor])
}

model Notificacion {
  id          String           @id @default(uuid())
  titulo      String
  mensaje     String           @db.Text
  leida       Boolean          @default(false)
  createdAt   DateTime         @default(now())
  tipo        TipoNotificacion
  solicitudId Int?
  usuarioId   String
  solicitud   Solicitud?       @relation(fields: [solicitudId], references: [id])
  usuario     User             @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([solicitudId])
}

model Detalle {
  id                   String    @id @default(uuid())
  solicitudId          Int       @unique
  Testigo1             String?
  Testigo2             String?
  Acta_de_nacimiento   String?
  Acta_de_matrimonio   String?
  Acta_de_defuncion    String?
  Acta_de_divorcio     String?
  Testigo3             String?
  Testigo4             String?
  generic_text         String?
  bienes_generico1     String?
  bienes_generico2     String?
  bienes_generico3     String?
  bienes_generico4     String?
  bienes_generico5     String?
  solicitud_finalizada String?
  solicitud            Solicitud @relation(fields: [solicitudId], references: [id])
}

model Nota {
  id          String      @id @default(uuid())
  contenido   String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  solicitudes Solicitud[]
}

model NotaPredefinida {
  id        String   @id @default(uuid())
  contenido String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Empresa {
  id                  String      @id @default(uuid())
  nombre              String      @unique
  direccion           String
  telefono            String
  createdAt           DateTime    @default(now())
  RIF                 String      @unique
  persona_de_contacto String
  email               String
  tipo                TipoEmpresa
  users               User[]      @relation("UserEmpresa")
}

model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String?       @unique
  content     String?       @db.Text
  imageUrl    String?
  isPublished Boolean       @default(false)
  authorId    String
  categoryId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  titleMeta   String?
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    BlogCategory? @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "BlogPost_authorId_fkey")
  @@index([categoryId], map: "BlogPost_categoryId_fkey")
}

model BlogCategory {
  id    String     @id @default(cuid())
  name  String     @unique
  posts BlogPost[]
}

enum TipoNotificacion {
  ASIGNACION
  ESTADO_CAMBIO
  DOCUMENTO_EDITABLE
  NOTA_NUEVA
  GENERAL
}

enum TipoEmpresa {
  SEGURO
  TELECOMUNICACIONES
  BANCO
  INDUSTRIAL
  NINGUNO
}

enum UserRole {
  CLIENT
  ADMIN
  ABOGADO
}

enum Estado {
  PENDIENTE
  APROBADA
  EN_PROGRESO
  FINALIZADA
  RECHAZADA
}

enum Parentesco {
  PADRE
  MADRE
  HIJO
  HIJA
  ESPOSO
  ESPOSA
}

enum OnboardingStatus {
  PENDIENTE
  FINALIZADO
  CANCELADO
}

enum EstadoDeResidencia {
  Amazonas
  Anzoátegui
  Apure
  Aragua
  Barinas
  Bolívar
  Carabobo
  Cojedes
  Delta_Amacuro
  Distrito_Capital
  Falcón
  Guárico
  Lara
  La_Guaira
  Mérida
  Miranda
  Monagas
  Nueva_Esparta
  Portuguesa
  Sucre
  Táchira
  Trujillo
  Yaracuy 
  Zulia
}

enum EstadoCivil {
  SOLTERO
  CASADO
}
